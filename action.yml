name: 'Positionless Analyzer'
description: 'A Go static analyzer that detects positional struct literal initialization'
author: 'flaticols'

branding:
  icon: 'check-circle'
  color: 'blue'

inputs:
  path:
    description: 'Path to analyze (default: ./...)'
    required: false
    default: './...'
  fix:
    description: 'Apply suggested fixes automatically'
    required: false
    default: 'false'
  include-generated:
    description: 'Include generated files in analysis'
    required: false
    default: 'false'
  version:
    description: 'Version of positionless to use (default: latest)'
    required: false
    default: 'latest'

outputs:
  findings-count:
    description: 'Number of positional struct literals found'
    value: ${{ steps.analyze.outputs.findings-count }}
  fixed-count:
    description: 'Number of fixes applied (when fix is enabled)'
    value: ${{ steps.analyze.outputs.fixed-count }}
  exit-code:
    description: 'Exit code from the analyzer (0 if successful)'
    value: ${{ steps.analyze.outputs.exit-code }}
  version:
    description: 'Version of positionless used'
    value: ${{ steps.download.outputs.version }}

runs:
  using: 'composite'
  steps:
    - name: Setup - Download and install positionless binary
      id: download
      shell: bash
      run: |
        # Determine version
        VERSION="${{ inputs.version }}"
        if [ "$VERSION" = "latest" ]; then
          echo "Fetching latest version..."
          VERSION=$(curl -s https://api.github.com/repos/flaticols/positionless/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        fi
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        
        # Determine platform and architecture
        OS=$(uname -s)
        ARCH=$(uname -m)
        
        # Map to release naming convention
        case "$OS" in
          Linux) PLATFORM="Linux" ;;
          Darwin) PLATFORM="Darwin" ;;
          *) echo "Unsupported OS: $OS"; exit 1 ;;
        esac
        
        case "$ARCH" in
          x86_64) ARCH="x86_64" ;;
          aarch64|arm64) ARCH="arm64" ;;
          i386|i686) ARCH="i386" ;;
          *) echo "Unsupported architecture: $ARCH"; exit 1 ;;
        esac
        
        # Download and extract
        FILENAME="positionless_${PLATFORM}_${ARCH}.tar.gz"
        URL="https://github.com/flaticols/positionless/releases/download/${VERSION}/${FILENAME}"
        
        echo "Downloading positionless ${VERSION} for ${PLATFORM}_${ARCH}..."
        curl -L -o positionless.tar.gz "$URL"
        tar -xzf positionless.tar.gz
        chmod +x positionless
        
        # Add to PATH
        echo "$PWD" >> $GITHUB_PATH

    - name: Analyze - Run positionless on codebase
      id: analyze
      shell: bash
      run: |
        FLAGS=""
        if [ "${{ inputs.fix }}" == "true" ]; then
          FLAGS="$FLAGS -fix"
        fi
        if [ "${{ inputs.include-generated }}" == "true" ]; then
          FLAGS="$FLAGS -generated"
        fi
        
        echo "Running: positionless $FLAGS ${{ inputs.path }}"
        
        # Run analyzer and capture output
        OUTPUT=$(positionless $FLAGS ${{ inputs.path }} 2>&1) || EXIT_CODE=$?
        
        # Only echo output if it's not empty
        if [ -n "$OUTPUT" ]; then
          echo "$OUTPUT"
        fi
        
        # Parse output for metrics
        if [ -n "$OUTPUT" ]; then
          FINDINGS_COUNT=$(echo "$OUTPUT" | grep -c "positional struct literal" || echo "0")
          if [ "${{ inputs.fix }}" == "true" ]; then
            FIXED_COUNT=$(echo "$OUTPUT" | grep -c "Fixed:" || echo "0")
          else
            FIXED_COUNT=0
          fi
        else
          FINDINGS_COUNT=0
          FIXED_COUNT=0
        fi
        
        # Set outputs using the correct format
        echo "findings-count=${FINDINGS_COUNT}" >> "$GITHUB_OUTPUT"
        echo "fixed-count=${FIXED_COUNT}" >> "$GITHUB_OUTPUT"
        echo "exit-code=${EXIT_CODE:-0}" >> "$GITHUB_OUTPUT"
        
        # Exit with original exit code
        exit ${EXIT_CODE:-0}